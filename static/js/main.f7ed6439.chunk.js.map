{"version":3,"sources":["serviceWorker.js","Header.js","TaskOptions.js","TaskList.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","signInOutText","this","props","isSignedIn","react_default","a","createElement","className","onClick","signInOut","Component","TaskOptions","inputElement","React","createRef","addTask","e","preventDefault","_this","current","value","focus","type","ref","clear","TaskList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","hoveredElement","fromPos","toPos","collapsibleContentRef","toggleCompleted","showCompleted","state","setState","style","maxHeight","scrollHeight","handleDragStart","target","getAttribute","dataTransfer","effectAllowed","handleDragOver","dropEffect","handleDragEnter","pos","overElement","classList","remove","add","reorderTasks","handleDragEnd","_this2","tasks","taskDoneDivs","taskNotDoneDivs","_loop","key","task","isDone","push","toggleDone","name","deleteTask","position","onDragStart","onDragEnter","onDragOver","onDragEnd","draggable","length","App","uid","provider","firebase","auth","GoogleAuthProvider","signInWithPopup","catch","console","error","signOut","taskName","tasksRef","set","child","onAuthStateChanged","user","userRef","database","on","snap","val","src_Header","src_TaskOptions","src_TaskList","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,0HCYSC,gMAhBb,IAAMC,EAAgBC,KAAKC,MAAMC,WAAa,WAAa,UAE3D,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACdH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,UACCC,UAAU,WACVC,QAASP,KAAKC,MAAMO,WACnBT,WAVeU,cCqDNC,6MAlDdC,aAAeC,IAAMC,cAarBC,QAAU,SAACC,GAEVA,EAAEC,iBACFC,EAAKhB,MAAMa,QAAQG,EAAKN,aAAaO,QAAQC,OAC7CF,EAAKN,aAAaO,QAAQC,MAAQ,uFAXlCnB,KAAKW,aAAaO,QAAQE,yCAkB1B,OACCjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACdH,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,YACCF,EAAAC,EAAAC,cAAA,SACCgB,KAAK,OACLC,IAAKtB,KAAKW,eACXR,EAAAC,EAAAC,cAAA,UACCgB,KAAK,SACLf,UAAU,kBACVC,QAASP,KAAKc,SAHf,MAODX,EAAAC,EAAAC,cAAA,UACCC,UAAU,WACVC,QAASP,KAAKC,MAAMsB,OAFrB,kBAxCqBd,aC4JXe,cA9Id,SAAAA,EAAYvB,GAAO,IAAAgB,EAAA,OAAAQ,OAAAC,EAAA,EAAAD,CAAAzB,KAAAwB,IAElBP,EAAAQ,OAAAE,EAAA,EAAAF,CAAAzB,KAAAyB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA7B,KAAMC,KARP6B,eAAiB,KAMEb,EALnBc,QAAU,KAKSd,EAJnBe,MAAQ,KAIWf,EAHnBgB,sBAAwBrB,IAAMC,YAGXI,EAYnBiB,gBAAkB,WAGjB,IAAMC,EAAgBlB,EAAKmB,MAAMD,cACjClB,EAAKoB,SAAS,CACbF,eAAgBA,IAKblB,EAAKgB,sBAAsBf,QAAQoB,MAAMC,UAE5CtB,EAAKgB,sBAAsBf,QAAQoB,MAAMC,UAAY,KAKrDtB,EAAKgB,sBAAsBf,QAAQoB,MAAMC,UAAYtB,EAAKgB,sBAAsBf,QAAQsB,aAAe,MA7BtFvB,EAkCnBwB,gBAAkB,SAAC1B,GAElBE,EAAKc,QAAUhB,EAAE2B,OAAOC,aAAa,YACrC5B,EAAE6B,aAAaC,cAAgB,QArCb5B,EAwCnB6B,eAAiB,SAAC/B,GAEjBA,EAAE6B,aAAaG,WAAa,QA1CV9B,EA6CnB+B,gBAAkB,SAACjC,GAElB,IAAMkC,EAAMlC,EAAE2B,OAAOC,aAAa,YACtB,OAARM,IAGChC,EAAKiC,aAAajC,EAAKiC,YAAYC,UAAUC,OAAO,YACxDnC,EAAKiC,YAAcnC,EAAE2B,OACrBzB,EAAKiC,YAAYC,UAAUE,IAAI,YAG/BpC,EAAKe,MAAQiB,EACbhC,EAAKhB,MAAMqD,aAAarC,EAAKc,QAASd,EAAKe,OAC3Cf,EAAKc,QAAUkB,IA1DEhC,EA8DnBsC,cAAgB,SAACxC,GAGZE,EAAKiC,aAAajC,EAAKiC,YAAYC,UAAUC,OAAO,aA9DxDnC,EAAKmB,MAAQ,CACZD,eAAe,GAJElB,wEAuEV,IAAAuC,EAAAxD,KAEJyD,EAAQzD,KAAKC,MAAMwD,MACnBC,EAAe,GACfC,EAAkB,GAJdC,EAAA,SAOCC,GAER,IAAMC,EAAOL,EAAMI,GAEfC,EAAKC,OAERL,EAAaM,KACZ7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOuD,IAAKA,GAC1B1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,QAAS,kBAAMiD,EAAKvD,MAAMgE,WAAWJ,MAChE1D,EAAAC,EAAAC,cAAA,SAAIyD,EAAKI,MACT/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaC,QAAS,kBAAMiD,EAAKvD,MAAMkE,WAAWN,QAMnEF,EAAgBK,KACf7D,EAAAC,EAAAC,cAAA,OACCC,UAAU,OACVuD,IAAKA,EACLO,SAAUP,EACVQ,YAAab,EAAKf,gBAClB6B,YAAad,EAAKR,gBAClBuB,WAAYf,EAAKV,eACjB0B,UAAWhB,EAAKD,cAChBkB,UAAU,QACVtE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBC,QAAS,kBAAMiD,EAAKvD,MAAMgE,WAAWJ,MACpE1D,EAAAC,EAAAC,cAAA,SAAIyD,EAAKI,MACT/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaC,QAAS,kBAAMiD,EAAKvD,MAAMkE,WAAWN,SA5BrE,IAAK,IAAIA,KAAOJ,EAAOG,EAAdC,GAmCT,OAA2B,IAAxBH,EAAagB,OAGdvE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACdH,EAAAC,EAAAC,cAAA,WACEsD,GAEFxD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcC,QAASP,KAAKkC,iBAA9C,aACA/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBgB,IAAKtB,KAAKiC,uBAC7CyB,IASHvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACdH,EAAAC,EAAAC,cAAA,WACEsD,WA7IgBlD,aCqKRkE,cA1Jd,SAAAA,EAAY1E,GAAO,IAAAgB,EAAA,OAAAQ,OAAAC,EAAA,EAAAD,CAAAzB,KAAA2E,IAElB1D,EAAAQ,OAAAE,EAAA,EAAAF,CAAAzB,KAAAyB,OAAAG,EAAA,EAAAH,CAAAkD,GAAA9C,KAAA7B,KAAMC,KAkDPO,UAAY,WAGX,GAAuB,KAAnBS,EAAKmB,MAAMwC,IAAY,CAE1B,IAAIC,EAAW,IAAIC,IAASC,KAAKC,mBACjCF,IAASC,OAAOE,gBAAgBJ,GAAUK,MAAM,SAACnE,GAChDoE,QAAQC,MAAMrE,UAMf+D,IAASC,OAAOM,UAAUH,MAAM,SAACnE,GAChCoE,QAAQC,MAAMrE,MAlEEE,EA0EnBH,QAAU,SAACwE,GAGSrE,EAAKmB,MAAMmD,SAASvB,OAG5BwB,IAAI,CACdtB,KAAMoB,EACNvB,QAAQ,KAlFS9C,EAuFnBM,MAAQ,WAEPN,EAAKmB,MAAMmD,SAASnC,UAzFFnC,EA+FnBgD,WAAa,SAACJ,GAEG5C,EAAKmB,MAAMmD,SAASE,MAAM5B,GAClC4B,MAAM,UAAUD,KAAKvE,EAAKmB,MAAMqB,MAAMI,GAAKE,SAlGjC9C,EAsGnBkD,WAAa,SAACN,GAEG5C,EAAKmB,MAAMmD,SAASE,MAAM5B,GAClCT,UAzGUnC,EA6GnBqC,aAAe,SAACvB,EAASC,GAExBf,EAAKmB,MAAMmD,SAASE,MAAMzD,GAAOwD,IAAIvE,EAAKmB,MAAMqB,MAAM1B,IACtDd,EAAKmB,MAAMmD,SAASE,MAAM1D,GAASyD,IAAIvE,EAAKmB,MAAMqB,MAAMzB,KA7GxDf,EAAKmB,MAAQ,CACZwC,IAAK,GACLW,SAAU,KACV9B,MAAO,IANUxC,mFAUC,IAAAuC,EAAAxD,KAGnB8E,IAASC,OAAOW,mBAAoB,SAAAC,GAGnC,GAAIA,EAAM,CAGTnC,EAAKnB,SAAS,CAACuC,IAAKe,EAAKf,MAGzB,IAAMgB,EAAUd,IAASe,WAAWvE,MAAMmE,MAAM,SAASA,MAAMjC,EAAKpB,MAAMwC,KAC1EpB,EAAKnB,SAAS,CACbkD,SAAUK,IAIXpC,EAAKpB,MAAMmD,SAASO,GAAG,QAAS,SAAAC,GAC/BvC,EAAKnB,SAAS,CACboB,MAAOsC,EAAKC,eAOdxC,EAAKnB,SAAS,CACbuC,IAAK,GACLW,SAAU,KACV9B,MAAO,wCAiFV,MAAuB,KAAnBzD,KAAKoC,MAAMwC,IAGbzE,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAC4F,EAAD,CACCzF,UAAWR,KAAKQ,UAChBN,YAAY,IACbC,EAAAC,EAAAC,cAAC6F,EAAD,CACCpF,QAASd,KAAKc,QACdS,MAAOvB,KAAKuB,QACbpB,EAAAC,EAAAC,cAAC8F,EAAD,CACC1C,MAAOzD,KAAKoC,MAAMqB,MAClBQ,WAAYjE,KAAKiE,WACjBE,WAAYnE,KAAKmE,WACjBb,aAActD,KAAKsD,gBAQrBnD,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAC4F,EAAD,CACCzF,UAAWR,KAAKQ,UAChBN,YAAY,YArJAO,aCVlBqE,IAASsB,cATI,CACZC,OAAQ,0CACRC,WAAY,yCACZC,YAAa,gDACbC,UAAW,yBACXC,cAAe,qCACfC,kBAAmB,iBAOpBC,IAASC,OAAOzG,EAAAC,EAAAC,cAACwG,EAAD,MAASC,SAASC,eAAe,SL4G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f7ed6439.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\n\n\n// Structure\n// - Title: To-Do List\n// - Sign in/out button\n\n// Props\n// - signInOut: Callback function for sign in/out button\n// - isSignedIn: Whether the button is a sign in or sign out\n\n\nclass Header extends Component {\n\trender () {\n\t\tconst signInOutText = this.props.isSignedIn ? \"Sign Out\" : \"Sign In\";\n\n\t\treturn (\n\t\t\t<div className=\"container header\">\n\t\t\t\t<h1>To-Do List</h1>\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn-blue\"\n\t\t\t\t\tonClick={this.props.signInOut}>\n\t\t\t\t\t{signInOutText}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\nexport default Header;","import React, { Component } from 'react';\n\n\n// Structure\n// - Input: New task title\n// - Add task button\n// - Clear tasks button: Clears all tasks\n\n// Props\n// - addTask: Callback function for add task button\n// - clear: Callback function for clear button\n\n\nclass TaskOptions extends Component {\n\n\tinputElement = React.createRef();\n\n\t// Lifecycle Methods\n\t// Autofocus on add task input\n\tcomponentDidMount() {\n\n\t\tthis.inputElement.current.focus();\n\t}\n\n\t//////////////////////////////////////////////////////////////////////////////\n\n\t// Callback Functions\n\t// Add task: Call the props callback function & reset the input's value\n\taddTask = (e) => {\n\n\t\te.preventDefault();\t\n\t\tthis.props.addTask(this.inputElement.current.value);\n\t\tthis.inputElement.current.value = \"\";\n\t}\n\n\t//////////////////////////////////////////////////////////////////////////////\n\n\trender() {\n\t\t\n\t\treturn (\n\t\t\t<div className=\"container task-options\">\n\t\t\t\t<div>\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tref={this.inputElement} />\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tclassName=\"btn-green round\"\n\t\t\t\t\t\t\tonClick={this.addTask}>\n\t\t\t\t\t\t\t+\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</form>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn-pink\"\n\t\t\t\t\t\tonClick={this.props.clear}>\n\t\t\t\t\t\tClear\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\nexport default TaskOptions;","import React, { Component } from 'react';\n\n// Structure\n// - Uncompleted tasks\n// \t\t- Checkbox\n//\t\t- Task name\n//\t\t- Trash button\n// - Completed: Click to collapse & expand\n// - Completed tasks (same structure as uncompleted tasks)\n\n// Props\n// - tasks: dictionary of tasks (key {name: taskName, isDone: true/false})\n// - toggleDone: Callback function for checkbox button\n// - deleteTask: Callback function for trash button\n// - reorderTasks: Callback function for reordering by dragging\n\n// State\n// - showCompleted: Whether to show completed tasks\n\nclass TaskList extends Component {\n\n\thoveredElement = null;\n\tfromPos = null;\n\ttoPos = null;\n\tcollapsibleContentRef = React.createRef();\n\n\t// Lifecycle Methods\n\tconstructor(props) {\n\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tshowCompleted: false\n\t\t};\n\t}\n\n\t//////////////////////////////////////////////////////////////////////////////\n\n\t// Callback Functions\n\t// Toggle the showing of completed tasks\n\ttoggleCompleted = () => {\n\n\t\t// Toggle state value\n\t\tconst showCompleted = this.state.showCompleted\n\t\tthis.setState({\n\t\t\tshowCompleted: !showCompleted\n\t\t});\n\n\t\t// Toggle visibility\n\t\t// Hide\n\t\tif (this.collapsibleContentRef.current.style.maxHeight) {\n\n\t\t\tthis.collapsibleContentRef.current.style.maxHeight = null;\n\n\t\t// Show\n\t\t} else {\n\n\t\t\tthis.collapsibleContentRef.current.style.maxHeight = this.collapsibleContentRef.current.scrollHeight + \"px\";\n\t\t}\n\t};\n\n\t// Reordering of lists\n\thandleDragStart = (e) => {\n\t\t\n\t\tthis.fromPos = e.target.getAttribute(\"position\");\n\t\te.dataTransfer.effectAllowed = 'move'; // Change cursor\n\t};\n\n\thandleDragOver = (e) => {\n\n\t\te.dataTransfer.dropEffect = 'move'; // Change cursor\n\t};\n\n\thandleDragEnter = (e) => {\n\n\t\tconst pos = e.target.getAttribute(\"position\");\n\t\tif (pos !== null) {\n\n\t\t\t// Update classes\n\t\t\tif (this.overElement) this.overElement.classList.remove(\"dragging\");\n\t\t\tthis.overElement = e.target;\n\t\t\tthis.overElement.classList.add(\"dragging\");\n\n\t\t\t// Update toPos & fromPos + Reorder\n\t\t\tthis.toPos = pos;\n\t\t\tthis.props.reorderTasks(this.fromPos, this.toPos);\n\t\t\tthis.fromPos = pos;\n\t\t}\n\t};\n\n\thandleDragEnd = (e) => {\n\n\t\t// Update classes\n\t\tif (this.overElement) this.overElement.classList.remove(\"dragging\");\n\t};\n\n\n\t//////////////////////////////////////////////////////////////////////////////\n\n\trender() {\n\n\t\tlet tasks = this.props.tasks;\n\t\tlet taskDoneDivs = [];\n\t\tlet taskNotDoneDivs = [];\n\n\t\t// Fill up taskDoneDivs & taskNotDoneDivs\n\t\tfor (let key in tasks) {\n\n\t\t\tconst task = tasks[key];\n\n\t\t\tif (task.isDone) {\n\n\t\t\t\ttaskDoneDivs.push(\n\t\t\t\t\t<div className=\"task\" key={key}>\n\t\t\t\t\t\t<div className=\"icon done\" onClick={() => this.props.toggleDone(key)}></div>\n\t\t\t\t\t\t<p>{task.name}</p>\n\t\t\t\t\t\t<div className=\"icon trash\" onClick={() => this.props.deleteTask(key)}></div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\ttaskNotDoneDivs.push(\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"task\"\n\t\t\t\t\t\tkey={key}\n\t\t\t\t\t\tposition={key}\n\t\t\t\t\t\tonDragStart={this.handleDragStart}\n\t\t\t\t\t\tonDragEnter={this.handleDragEnter}\n\t\t\t\t\t\tonDragOver={this.handleDragOver}\n\t\t\t\t\t\tonDragEnd={this.handleDragEnd}\n\t\t\t\t\t\tdraggable=\"true\">\n\t\t\t\t\t\t<div className=\"icon not-done\" onClick={() => this.props.toggleDone(key)}></div>\n\t\t\t\t\t\t<p>{task.name}</p>\n\t\t\t\t\t\t<div className=\"icon trash\" onClick={() => this.props.deleteTask(key)}></div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Completed Tasks\n\t\tif(taskDoneDivs.length !== 0) {\n\n\t\t\treturn (\n\t\t\t\t<div className=\"container task-list\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{taskNotDoneDivs}\n\t\t\t\t\t</div>\n\t\t\t\t\t<button className=\"collapsible\" onClick={this.toggleCompleted}>Completed</button>\n\t\t\t\t\t<div className=\"collapsible-content\" ref={this.collapsibleContentRef}>\n\t\t\t\t\t\t{taskDoneDivs}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\n\t\t// No completed tasks\n\t\t} else {\n\n\t\t\treturn (\n\t\t\t\t<div className=\"container task-list\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{taskNotDoneDivs}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\n\nexport default TaskList;","import React, { Component } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/auth';\nimport Header from './Header';\nimport TaskOptions from './TaskOptions';\nimport TaskList from './TaskList';\n\n\n// Database\n// users\n// - userID\n// \t\t- taskKey\n// \t\t\t- name: taskName\n// \t\t\t- isDone: true/false (false by default)\n\n// Structure\n// - Header: title + sign in/out\n// - TaskOptions: add tasks + clear tasks\n// - TaskList: list of uncompleted & completed tasks\n\n// State\n// - uid: userID\n// - tasks\n// - tasksRef\n\n\nclass App extends Component {\n\n\t// Lifecycle methods\n\tconstructor(props) {\n\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tuid: \"\",\n\t\t\ttasksRef: null,\n\t\t\ttasks: {}\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\n\t\t// Whenever the authentication state changes\n\t\tfirebase.auth().onAuthStateChanged( user => {\n\n\t\t\t// Signed in\n\t\t\tif (user) {\n\n\t\t\t\t// Update uid\n\t\t\t\tthis.setState({uid: user.uid});\n\n\t\t\t\t// Update tasksRef\n\t\t\t\tconst userRef = firebase.database().ref().child(\"users\").child(this.state.uid);\n\t\t\t\tthis.setState({\n\t\t\t\t\ttasksRef: userRef\n\t\t\t\t});\n\n\t\t\t\t// Update tasks whenever tasksRef changes\n\t\t\t\tthis.state.tasksRef.on(\"value\", snap => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\ttasks: snap.val()\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t// Not signed in: Reset uid, tasks & tasksRef\n\t\t\t} else {\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tuid: \"\",\n\t\t\t\t\ttasksRef: null,\n\t\t\t\t\ttasks: {}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t//////////////////////////////////////////////////////////////////////////////\n\n\t// Callback functions (lambda functions used to automatically bind this)\n\n\t// Header\n\t// Sign in/out button\n\tsignInOut = () => {\n\t\t\n\t\t// Sign in (using Google accounts)\n\t\tif (this.state.uid === \"\") {\n\n\t\t\tvar provider = new firebase.auth.GoogleAuthProvider();\n\t\t\tfirebase.auth().signInWithPopup(provider).catch((e) => {\n\t\t\t\tconsole.error(e);\n\t\t\t});\n\n\t\t// Sign out\n\t\t} else {\n\n\t\t\tfirebase.auth().signOut().catch((e) => {\n\t\t\t\tconsole.error(e);\n\t\t\t});\n\t\t}\n\t};\n\n\n\t// TaskOptions\n\t// Add task button\n\taddTask = (taskName) => {\n\n\t\t// Get a new key for the task\n\t\tconst newTaskRef = this.state.tasksRef.push();\n\n\t\t// Assign the taskName & set isDone to false by default\n\t\tnewTaskRef.set({\n\t\t\tname: taskName,\n\t\t\tisDone: false\n\t\t});\n\t};\n\n\t// Clear button (remove all tasks by deleting the tasks ref)\n\tclear = () => {\n\n\t\tthis.state.tasksRef.remove();\n\t};\n\n\n\t// TaskList\n\t// Checkbox button (toggle isDone)\n\ttoggleDone = (key) => {\n\n\t\tconst taskRef = this.state.tasksRef.child(key);\n\t\ttaskRef.child(\"isDone\").set(!this.state.tasks[key].isDone);\n\t};\n\n\t// Trash button (delete the task ref)\n\tdeleteTask = (key) => {\n\n\t\tconst taskRef = this.state.tasksRef.child(key);\n\t\ttaskRef.remove();\n\t};\n\n\t// Dragging (swap values of fromPos & toPos)\n\treorderTasks = (fromPos, toPos) => {\n\n\t\tthis.state.tasksRef.child(toPos).set(this.state.tasks[fromPos]);\n\t\tthis.state.tasksRef.child(fromPos).set(this.state.tasks[toPos]);\n\t};\n\n\n\t//////////////////////////////////////////////////////////////////////////////\n\t\n\trender() {\n\n\t\t// Signed in\n\t\tif (this.state.uid !== \"\") {\n\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<Header\n\t\t\t\t\t\tsignInOut={this.signInOut}\n\t\t\t\t\t\tisSignedIn={true} />\n\t\t\t\t\t<TaskOptions\n\t\t\t\t\t\taddTask={this.addTask}\n\t\t\t\t\t\tclear={this.clear} />\n\t\t\t\t\t<TaskList\n\t\t\t\t\t\ttasks={this.state.tasks}\n\t\t\t\t\t\ttoggleDone={this.toggleDone}\n\t\t\t\t\t\tdeleteTask={this.deleteTask}\n\t\t\t\t\t\treorderTasks={this.reorderTasks} />\n\t\t\t\t</div>\n\t\t\t);\n\n\t\t// Not signed in (no TaskOptions & TaskList)\n\t\t} else {\n\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<Header\n\t\t\t\t\t\tsignInOut={this.signInOut}\n\t\t\t\t\t\tisSignedIn={false} />\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase/app';\nimport './resources/css/index.css';\nimport App from './App';\n\n// Configure Firebase App\nvar config = {\n\tapiKey: \"AIzaSyAQF-rTPPF46aNuqiWIR4c-xWdWI8zx8VA\",\n\tauthDomain: \"productivity-app-f8175.firebaseapp.com\",\n\tdatabaseURL: \"https://productivity-app-f8175.firebaseio.com\",\n\tprojectId: \"productivity-app-f8175\",\n\tstorageBucket: \"productivity-app-f8175.appspot.com\",\n\tmessagingSenderId: \"990382624221\"\n};\n\nfirebase.initializeApp(config);\n\n\n// Render the App\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}